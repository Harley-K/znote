(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{415:function(v,_,t){"use strict";t.r(_);var a=t(3),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("Boxx"),v._v(" "),t("p",[v._v("TCP/UDP协议是"),t("strong",[v._v("传输层协议")]),v._v("，主要解决数据如何在网络中传输，而HTTP是"),t("strong",[v._v("应用层协议")]),v._v("，主要解决如何包装数据。")]),v._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#tcp"}},[v._v("TCP")]),t("ul",[t("li",[t("a",{attrs:{href:"#tcp三次握手-★"}},[v._v("TCP三次握手 ★")])]),t("li",[t("a",{attrs:{href:"#为什么tcp客户端最后还要发送一次确认呢？"}},[v._v("为什么TCP客户端最后还要发送一次确认呢？")])])])]),t("li",[t("a",{attrs:{href:"#udp"}},[v._v("UDP")])]),t("li",[t("a",{attrs:{href:"#tcp和udp区别"}},[v._v("TCP和UDP区别")])]),t("li",[t("a",{attrs:{href:"#tcp与udp的适用场景"}},[v._v("TCP与UDP的适用场景")])]),t("li",[t("a",{attrs:{href:"#websocket"}},[v._v("WebSocket")])])])]),t("p"),v._v(" "),t("p",[v._v("简单理解： “IP”代表网际协议，TCP和UDP使用该协议从一个网络传送数据包到另一个网络。把IP想像成一种高速"),t("code",[v._v("公路")]),v._v("，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP和UDP是高速公路上的"),t("code",[v._v("卡车")]),v._v("，它们携带的"),t("code",[v._v("货物")]),v._v("就是像HTTP，文件传输协议FTP这样的协议等。")]),v._v(" "),t("p",[v._v("当然还有像SOCKET这种抽象层：TCP/IP网络的API。Socket（相当于"),t("code",[v._v("码头/车站")]),v._v("）是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。")]),v._v(" "),t("p",[v._v("TCP提供有保证的数据传输，UDP不提供，而"),t("u",[v._v("HTTP就是基于TCP实现的应用层协议")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[v._v("#")]),v._v(" TCP")]),v._v(" "),t("p",[v._v("TCP是一种"),t("strong",[v._v("面向连接的、可靠的")]),v._v("传输层协议；")]),v._v(" "),t("p",[v._v("TCP协议建立在不可靠的网络层 IP 协议之上，IP协议并不能提供任何可靠性机制，TCP的可靠性完全由自己实现；")]),v._v(" "),t("p",[v._v("TCP采用的最基本的可靠性技术是：确认与"),t("strong",[v._v("超时重传机制")]),v._v("、"),t("strong",[v._v("流量控制机制")]),v._v("（别发的太快已保证对方能收到）；")]),v._v(" "),t("h3",{attrs:{id:"tcp三次握手-★"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手-★"}},[v._v("#")]),v._v(" TCP三次握手 ★")]),v._v(" "),t("p",[v._v("*   第一次握手：客户端向服务器发送请求报文段，其中同步位SYN=1，序号SEQ=x（表明传送数据时的第一个数据字节的序号是x），等待服务器确认；")]),v._v(" "),t("p",[v._v("*   第二次握手：服务器收到客户端发来的请求，如果同意建立连接，就发回一个确认报文段，该报文段中同步位SYN=1，确认号ACK=x+1，序号SEQ=y；")]),v._v(" "),t("p",[v._v("*   第三次握手：客户端收到服务器的确认报文段后，还需要向服务器给出确认，向其发送确认包ACK(ack=y+1)，进而完成三次握手。")]),v._v(" "),t("h3",{attrs:{id:"为什么tcp客户端最后还要发送一次确认呢？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么tcp客户端最后还要发送一次确认呢？"}},[v._v("#")]),v._v(" 为什么TCP客户端最后还要发送一次确认呢？")]),v._v(" "),t("p",[v._v("一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。")]),v._v(" "),t("p",[v._v("如果使用的是两次握手建立连接，假设有这样一种场景，"),t("strong",[v._v("客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了")]),v._v("，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。")]),v._v(" "),t("p",[v._v("如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。")]),v._v(" "),t("h2",{attrs:{id:"udp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[v._v("#")]),v._v(" UDP")]),v._v(" "),t("p",[v._v("UDP是一种"),t("strong",[v._v("无连接的、不可靠的")]),v._v("传输层协议； 提供了有限的差错检验功能；目的是希望"),t("strong",[v._v("以最小的开销来达到网络环境中的进程通信目的")]),v._v("。")]),v._v(" "),t("p",[v._v("UDP（用户数据报协议）- 类似发短信：")]),v._v(" "),t("ol",[t("li",[v._v("只管发送，不确认对方是否接收到")]),v._v(" "),t("li",[v._v("将数据及源和目的封装成数据包中，不需要建立连接")]),v._v(" "),t("li",[v._v("每个数据包的大小限制在64K之内")]),v._v(" "),t("li",[v._v("因为无需连接，因此是不可靠协议")]),v._v(" "),t("li",[v._v("不需要建立连接，速度快")])]),v._v(" "),t("p",[v._v("随着现代网速的提升，UDP协议以其简单、传输快的优势，在越来越多场景下取代了TCP ， 如网页浏览、流媒体、实时游戏、物联网。")]),v._v(" "),t("h2",{attrs:{id:"tcp和udp区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp区别"}},[v._v("#")]),v._v(" TCP和UDP区别")]),v._v(" "),t("p",[v._v("TCP：")]),v._v(" "),t("p",[v._v("面向连接、传输可靠（保证数据正确性）、有序（保证数据顺序）、传输大量数据（流模式）、速度慢、对系统资源的要求多，程序结构较复杂，\n每一条TCP连接只能是点到点的，\nTCP首部开销20字节。")]),v._v(" "),t("p",[v._v("UDP：")]),v._v(" "),t("p",[v._v("面向非连接 、传输不可靠（可能丢包）、无序、传输少量数据（数据报模式）、速度快，对系统资源的要求少，程序结构较简单 ，\nUDP支持一对一，一对多，多对一和多对多的交互通信，\nUDP的首部开销小，只有8个字节。")]),v._v(" "),t("h2",{attrs:{id:"tcp与udp的适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp与udp的适用场景"}},[v._v("#")]),v._v(" TCP与UDP的适用场景")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("TCP用于在传输层有必要实现可靠传输的情况。")])]),v._v(" "),t("li",[t("p",[v._v("UDP主要用于那些对高速传输和实时性有较高要求的通信或广播通信。")]),v._v(" "),t("p",[v._v("举一个通过 IP 电话进行通话的例子。如果使用 TCP，数据在传送途中如果丢失就会被重发，这样就会导致无法流畅地传输通话人的声音。而采用UDP，它不会进行重发处理，从而也就不会有声音大幅度延迟到达的问题，即使有部分数据丢失，也只是会影响某一小部分的通话。")])])]),v._v(" "),t("h2",{attrs:{id:"websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[v._v("#")]),v._v(" WebSocket")]),v._v(" "),t("p",[v._v("可以把WebSocket想象成HTTP(应用层)，HTTP和Socket什么关系，WebSocket和Socket就是什么关系。")]),v._v(" "),t("p",[v._v("HTTP 协议有一个缺陷：通信只能由客户端发起，做不到服务器主动向客户端推送信息。")]),v._v(" "),t("p",[v._v("WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。它的最大特点就是，"),t("strong",[v._v("服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息")]),v._v("，是真正的双向平等对话，属于服务器推送技术的一种。")])],1)}),[],!1,null,null,null);_.default=s.exports}}]);